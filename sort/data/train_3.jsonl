{"text": "Common Career Technical Core\nThe Common Career Technical Core (CCTC) is a state-led initiative to establish a set of rigorous, high-quality standards for Career Technical Education (CTE) that states can adopt voluntarily. The standards have been informed by state and industry standards and developed by a diverse group of teachers, business and industry experts, administrators and researchers.\nThe initiative is being coordinated by the National Association of State Directors of Career Technical Education Consortium (NASDCTEc), which represents the state and territory heads of secondary, postsecondary and adult CTE across the nation. Forty-two states the District of Columbia and Palau participated in the development stage of the CCTC.\nThe development of the CCTC was a multi-step process that incorporated input from approximately 3,500 individuals representing K-12 education, business and industry and higher education from across the nation.\nThe process for developing the CCTC was informed by:\n\u2022 High-quality state and industry standards;\n\u2022 Input and guidance from educators, business and industry and state leaders; and\n\u2022 Feedback from the public.\nThe CCTC includes a set of standards for each of the 16 Career Clusters\u2122 and their corresponding Career Pathways that define what students should know and be able to do after completing instruction in a program of study. The CCTC also includes an overarching set of Career Ready Practices that apply to all programs of study. The Career Ready Practices include 12 statements that address the knowledge, skills and dispositions that are important to becoming career ready.\nIn June, the NASDCTEc Board of Directors voted in full support and approved the CCTC that defines common expectations for CTE organized by the National Career Clusters\u2122 Framework.\nLearn more about the CCTC or share information about the initiative with these resources:\nAn online database of the CCTC standards provides an opportunity to create reports specific to the needs of the user. In addition, additional resources including performance elements and sample indicators for the CCTC standards are provided as a resource tool in the exploration and understanding of the standards.\nA public license has been created for the use of the CCTC standards and is available to review.\nRepresentatives from organizations across the nation have expressed support for the CCTC. Learn who they are and share their statements with others as you work to gain support of and raise awareness about the CCTC in your state.\nA summary of the process used to achieve the outcomes of the CCTC. Report highlights the steps used, the participation and recommendations for future revisions and engagements associated with the development of the CCTC.\nA summary of the process, methodology and approach used to update the 2008 Knowledge and Skills Statements and prepare for transition for use by the Common Career Technical Core Working Groups in the development of the CCTC.\nFor additional information about the CCTC, contact email@example.com.", "id": "<urn:uuid:8cf81d29-853e-46bd-a28d-360d8ef806be>", "dump": "CC-MAIN-2013-20", "url": "http://www.careertech.org/career-technical-education/cctc/info.html", "file_path": "s3://commoncrawl/crawl-data/CC-MAIN-2013-20/segments/1368696381249/warc/CC-MAIN-20130516092621-00000-ip-10-60-113-184.ec2.internal.warc.gz", "language": "en", "language_score": 0.9477070569992065, "token_count": 599, "score": 2.625, "int_score": 3}
{"text": "Common Core Catholic Identity Initiative\nA national working group has begun the Common Core Catholic Identity Initiative (CCCII) to develop and disseminate resources and guidelines to assist Catholic elementary and secondary schools in integrating elements of Catholic identity (Catholic values, Scripture, Church social teachings, encyclicals, etc.) into curriculum and instruction based on the Common Core State Standards.\nThe initial phase of CCCII focuses on K-8 English/Language Arts/ Literacy. Resources for other subjects and for 9-12 curriculum will be developed in later phases.\nForty-six states have agreed to adopt the Common Core State Standards, a set of high quality K-12 learning standards that includes rigorous content and application of knowledge using higher-order thinking skills, leading students to college and career readiness. Currently, Catholic schools are assessing what the implications of the standards and accompanying assessments may be for them.\nWhile Catholic schools have their own local or diocesan standards, their ability to continue to provide high-quality education for their students is compelling them to consider adoption of the common core standards. Catholic schools will be impacted as curriculum resources and professional development opportunities become aligned with Common Core State Standards by producers of instructional materials, college teacher preparation programs, or regulations for participation in the federal programs that currently benefit their students and teachers. Within this environment, maintaining the uniqueness and integrity of the Catholic school will require integrating the demands of their mission and the academic expectations of their constituents and the wider education community.\nTo assist Catholic schools with enhancing Catholic identity integrated into the curriculum, the Common Core Catholic Identity Initiative (CCCII) has been launched as a collaborative project involving Catholic universities, corporations and sponsors invested in Catholic education, and the National Catholic Educational Association (NCEA).\nThe Common Core Catholic Identity Initiative has two goals:\n- to empower Catholic schools and dioceses to design and direct the implementation of the Common Core standards within the culture and context of a Catholic school curriculum\n- to infuse the Common Core standards with the faith/principles/values/social justice themes inherent in the mission and Catholic identity of the school.\nThe CCCII project aims to accomplish its goals by creating a process and a product:\nPhase 1: Gather approximately 35 practitioners and curriculum and catechetics experts to pilot a CCCII ELA Unit development process to be shared with the larger Catholic educational community. (June 2012)\nPhase 2: Revise and refine the unit development process so that it can be replicated in dioceses around the country.\nPhase 3: Invite participation in development of additional CCCII ELA Units by Catholic educators around the country.\nPhase 1: Utilize the expertise and strength of experienced and innovative teachers to develop complete units/exemplars that join Catholic identify with the Common Core curriculum standards. Utilize the expertise of CCCII leaders to develop supporting resources and guidelines. (June 2012)\nPhase 2: Post exemplar units, guidelines, and resources developed in for the June 2012 launch for open access by Catholic educators on the Catholic School Standards Project Website www.catholicschoolsstandards.org) . (July 2012)\nPhase 3: Expand exemplar units and Catholic Identity resources available for use by local Catholic schools.\nTailor the CCCII Unit development process for Catholic secondary schools.\nExpand CCCII to include additional subject areas.\nMeet the CCCII Leadership and Planning Teams", "id": "<urn:uuid:1f81392d-3957-4ac5-9659-ed3112273a06>", "dump": "CC-MAIN-2013-20", "url": "http://catholicschoolstandards.org/common-core-catholic-identity-initiative", "file_path": "s3://commoncrawl/crawl-data/CC-MAIN-2013-20/segments/1368696381249/warc/CC-MAIN-20130516092621-00000-ip-10-60-113-184.ec2.internal.warc.gz", "language": "en", "language_score": 0.9384240508079529, "token_count": 703, "score": 3.375, "int_score": 3}
{"text": "This study presents the results from a survey issued to speech-language pathologists in the state of Kentucky regarding their perspectives on referral and assessment of bilingual speakers whose primary language is not English. The study was conducted to determine methods for decreasing the over-identification of bilingual students served for speech and language disorders. Literature review indicates an over-identification of non-English speakers in special education and related services programs nationwide. There are many possible reasons for this over-identification some of which include: lack of English instruction prior to testing in English, Speech-Language Pathologists\u2019 preparation level, and shortage of appropriately normed assessment tools. This study specifically addresses Kentucky Speech-Language Pathologists\u2019 preparation and comfort level with referral and assessment of non-English speaking students.\nAdvisor(s) or Committee Chair\nProfessor Leisa Hutchison\nBilingual, Multilingual, and Multicultural Education | Speech and Rhetorical Studies\nSchulte, Kathleen M., \"A Speech-Language Pathologiest Perspective on the Referral and Assessment of Bilingual Children whose Primary Language is not English\" (2010). Honors College Capstone Experience/Thesis Projects. Paper 253.", "id": "<urn:uuid:e56ea051-5aef-4db5-9c59-b878ee08ff32>", "dump": "CC-MAIN-2013-20", "url": "http://digitalcommons.wku.edu/stu_hon_theses/253/", "file_path": "s3://commoncrawl/crawl-data/CC-MAIN-2013-20/segments/1368696381249/warc/CC-MAIN-20130516092621-00000-ip-10-60-113-184.ec2.internal.warc.gz", "language": "en", "language_score": 0.8816535472869873, "token_count": 239, "score": 2.734375, "int_score": 3}
{"text": "Business Language Learning\nFrom APEC HRDWG Wiki\nAs part of International Education Week 2010, APEC has expanded on several themes of the seminar on \"Language Education: An Essential for a Global Economy,\" to provide a guide for students and instructors interested in the critical importance of business language for strengthening business relations in a global context. These themes include Business in the 21st Century; Cross Cultural Awareness for 21st Century Business; Language for 21st Century Business; Business Language Learning; and Business Language Policy.\nIn Business Language Instruction, we learn that different economies use different methodologies by which to teach and learn the subject of business. We find that conflict may arise when these differing methodologies come together in a single classroom.\nAnother application of advanced communications technologies may be found in the classroom, where traditional textbooks may be supplemented with electronic media such as video clips, as well as live information from Internet newsfeeds, essentially making textbook materials come alive. Students today may not learn history, geography, and science as it was taught a few years ago. They may actually view and experience events via the Internet as if they were present during the moment in which they took place. Video conferencing in the classroom may have other applications, such as providing students access to language teachers in foreign countries and to subject matter experts thousands of miles away, who can appear in the classroom and guest lecture as if they were actually there. These powerful new communications technologies have enhanced business language instruction in schools and universities, as evidenced from the scenario presented below.\n- Technology provides web-based content to expand, complement, and supplement textbooks and teacher instruction.\n- Online educational materials blend face-to-face learning with digital teaching and curricula.\n- Technology such as virtual classroom fosters peer-to-peer and instructor-peer relationship building, collaboration, and social networking.\n- When designing lesson plans for international students, educators must consider how cultural values affect the way students respond to specific assignments.\n- Technology contributes to a green environment by saving paper and reducing travel.\nIn the fictional scenario below, teaching and learning methodologies from different economies clash as they are brought together into a single classroom, made possible only by advancements in telecommunications technologies.\nA prestigious university located in collectivist Economy A invited a Marketing professor from a renowned university in individualistic Economy B teach a year-long course on the Fundamentals of Marketing to first-year business students. The professor had recently published a book on McBurger, the hamburger chain, and its success in Economy A. The students in Economy A viewed his book as a premier marketing book in the field of international business. Conducted virtually over Internet video stream, the course was the first [Ed Note: for which economy? Using a mix of traditional and technology-mediated instruction is not that new. It may be a stretch to say it was the first time for such a mix.] to integrate traditional methods of teaching with new technologies. The professor would present a traditional lecture from the university's video conferencing room in Economy B and the students in Economy A would view the lecture and participate in discussion as if the professor were in their classroom. Students would submit all assignments and exams to the professor through a \"digital drop box,\" and the professor would return graded materials back to students via this medium. Using advanced technology in the classroom allowed students to learn from a renowned professor while enrolling in a \"green course,\" one in which the professor did not need to travel to the economy and no paper would be used for assignments.\nTo prepare for the course, the professor chose various marketing, advertising, and strategy cases from around the world. On the first day of class, he presented a case study on Boca Rola, and its advent into Economy C. He gave the students 30 minutes to read the case study, and then encouraged the students to share their views about: (1) Boca Rola\u2019s strategy to enter the market in Economy C, (2) the barriers Boca Rola faced in entering the market, (3) perceptions of foreign products previously unavailable in a particular economy, and (4) consumers' reaction to the new product. He found the students reluctant to share their individual views in the class. Thus, he presented his own views from the perspective of an outsider to Economy C, and shared his views about how Boca Rola\u2019s business culture may be different than the culture of Economy C in which it was operating. At the end of class, the professor gave the students a list of questions about the case study. He asked the students to form small groups of 3-4 students and discuss the answers to the questions. After they discussed the questions, he asked each team to submit a 5-6 page summary of the responses in three days. Additionally, he assigned another case study for the students to read \u2013 one that focused on a large multinational company\u2019s entry into the beauty care segment in Economy D for future discussion.\nWhen the professor reviewed the students\u2019 responses to the Boca Rola case study, he discovered that the 20 students had submitted 5 separate sets of case study responses, as required. However, each group provided the same responses to the same questions, with no variation. He knew that this could not be a blatant incidence of cheating. When the next class reconvened, he asked the students why they turned in identical sets of answers. The students looked surprised, believing that they had followed his instructions, but had perhaps misinterpreted them. Finally, one student raised his hand and stated that the class had formed groups of 3-4 students, but that each group tackled one question, and then shared the answers with the other groups. The students believed that it was not time efficient to discuss each question. Rather, they decided that each group would respond to just one question, and then share the response with the other groups, who would do the same. The professor smiled in exasperation, and, frustrated by his inability to engage the students in an open discussion, began discussing the beauty company\u2019s entry into Economy D.\nPoints to Consider\n- How has technology enhanced international educational opportunities for both students and instructors? Other than the examples cited, what other ways can technology facilitate international educational opportunities?\n- To what extent did the professor understand the students\u2019 motivation to learn, the context in which they learn, and their willingness to experiment and use different approaches to demonstrate what they can do and what they know?\n- Why was the strategy of open classroom discussion widely popular in Economy B and a widely used strategy to introduce opposing views, and to encourage critical thinking?\n- To what extent can strategies such as lesson study encourage students in Economy A to demonstrate problem solving skills, critical thinking, and creativity?\n- What could the professor do to model how each group could engage in separate discussions to understand the various perceptions about Boca Rola\u2019s strategy to enter the market in Economy C?\n- Individualistic cultures are those cultures in which the opinion of the individual is greatly sought after and deeply valued, even though it may differ from the views of the group. These cultures believe that it is a variety of individual opinions that produce the best solutions to problems and that promote success, whether in social relationships or in the workplace.\n- Collectivist cultures, on the other hand, value group consensus and harmony. These cultures believe that an environment conducive for business and personal success can only be created when members of the group align in sync with one another. Members of groups will first debate the merits of a question among themselves, and then choose the opinion that they deem most valuable before presenting it to a higher authority.\n- The Professor from Economy B was used to receiving individual responses to his case discussion questions, responses that varied greatly from one another. Although not all responses he received were correct, he enjoyed reading the individual opinions present in them before discussing the correct answers with the class during the following lecture. Economy A students were, however, from a collectivist culture and valued sharing their responses with their group first before reaching a consensus on a particular answer choice.\n- The professor noticed that, although he had received only one response per question, it was more or less correct, although there was not a way for him to ascertain which of his students had provided the response, how the learning had occurred, and what the viewpoints of those who disagreed might be.\n- Teaching Tips for IEW 2010 provided by TESOL\n- Teaching Tips for IEW 2009 submitted by teachers throughout the Asia-Pacific region\n- Videos from the APEC-RELC International Language Seminar presentation \"Creating Prosperity: Using the Internet to Revolutionize Language Learning\"\n- New paths of communication through:\n- Technology providing access to content beyond books\n- Video from the APEC-RELC International Language Seminar presentation \"Changes in Our Field: Where are We Going?\"\n- E-Language Learning for Students - a collection of online language learning resources from various APEC members\n- Related Tips for Teaching 21st Century Workplace Skills\nMore content from International Education Week 2010", "id": "<urn:uuid:a3ee253d-4ba5-4daa-a3ab-576294344497>", "dump": "CC-MAIN-2013-20", "url": "http://hrd.apec.org/index.php/Business_Language_Learning", "file_path": "s3://commoncrawl/crawl-data/CC-MAIN-2013-20/segments/1368696381249/warc/CC-MAIN-20130516092621-00000-ip-10-60-113-184.ec2.internal.warc.gz", "language": "en", "language_score": 0.9641935229301453, "token_count": 1852, "score": 2.90625, "int_score": 3}
{"text": "Transferable knowledge and a range of intellectual abilities drawn from different modes of inquiry across disciplines are essential components of any liberal education. These courses help students develop important academic capacities for use during their undergraduate career and in the rapidly-changing world they will enter after college.\n(one writing-intensive W-1 course in the fall of the first year)\nStudents will develop writing, reading, speaking, listening, and information literacy skills necessary for collegiate-level academic work.\nStudents will develop capacities for independent academic work and become self-regulated learners.\n(one course from the list of designated courses)\nStudents will develop a unified understanding of scientific theory and practice in modern natural science.\nStudents will demonstrate an understanding of the development of science as an intellectual pursuit and of the ways in which scientific ideas are formulated, modified, and come to be accepted.\nStudents will demonstrate skill in the application of scientific techniques and methods, including the collection, analysis, and interpretation of data, and communication of results.\n(one course from the list of designated courses; not required for Class of 2014)\nStudents will study language as a complex multifunctional phenomenon - as a system for communicating thought and information and as an essential element of human thought processes, perceptions, and self-expression - that allows students to understand different peoples and their communities.\nStudents will examine the world, their own culture, and their own language through the lens of a foreign language and culture.\nIntegrated Perspectives Course\n(one team-taught interdisciplinary course taken during the sophomore year from the list of designated courses; not required for Class of 2014)\nStudents will recognize, construct, and evaluate connections among different intellectual methods, ways of learning, and bodies of knowledge.", "id": "<urn:uuid:ad6de8ff-b389-41d5-a5b6-03d0efd5448c>", "dump": "CC-MAIN-2013-20", "url": "http://www.bucknell.edu/x56898.xml", "file_path": "s3://commoncrawl/crawl-data/CC-MAIN-2013-20/segments/1368696381249/warc/CC-MAIN-20130516092621-00000-ip-10-60-113-184.ec2.internal.warc.gz", "language": "en", "language_score": 0.9317713975906372, "token_count": 353, "score": 3.171875, "int_score": 3}
{"text": "- Exam wrappers. As David Thompson describes the process, \"exam wrappers required students to reflect on their performance before and after seeing their graded tests.\" The first four questions, completed just prior to receiving their graded test, asked students to report the time they spent preparing for the test, their methods of preparation, and their predicted test grade. After reviewing their graded test, students completed the final three reflection questions, including a categorization of test mistakes and a list of changes to implement in preparation for the next test. Thompson then collected and made copies of the wrappers returned them to the students several days later, reminding them to consider what they planned to do differently or the same in preparation for the upcoming test. Thompson reports that each reflection exercise required only 8-10 minutes of class time. Clara Hardy and others also describes uses exam wrappers.\n- Reading Reflections. As Karl Wirth writes, reading reflections, effectively outlined by David Bressoud (2008), are designed to address some of the challenges students face with college-level reading assignments. Students submit online reading reflections (e.g., using Moodle or Blackboard) after completing each reading assignment and before coming to class. In each reflection, students summarize the important concepts of the reading and describe what was interesting, surprising, or confusing to them. The reading reflections not only encourage students to read regularly before class, but they also promote content mastery and foster student development of monitoring, self-evaluation, and reflection skills. For the instructor, reading reflections facilitate \"just-in-time\" teaching and provide invaluable insights into student thinking and learning. According to Wirth, expert readers are skilled at using a wide range of strategies during all phases of reading (e.g., setting goals for learning, monitoring comprehension during reading, checking comprehension, and self-reflection), but most college instruction simply assumes the mastery of such metacognitive skills.\n- Knowledge surveys. Many members of the group were influenced by Karl Wirth's work on \"knowledge surveys\" as a central strategy for helping students think about their thinking. Knowledge surveys involve simple self-reports from students about their knowledge of course concepts and content. In knowledge surveys, students are presented with different facets of course content and are asked to indicate whether they know the answer, know some of the answer, or don't know the answer. Faculty can use these reports to gauge how confident students feel in their understanding of course material at the beginning or end of a course, before exams or papers, or even as graduating seniors or alumni.\nKristin Bonnie's report relates how her students completed a short knowledge survey (6-12 questions) online (via Google forms) on the material covered in class that week. Rather than providing the answer to each question, students indicated their confidence in their ability to answer the question correctly (I know; I think I know; I don't know). Students received a small amount of credit for completing the knowledge survey. She used the information to review material that students seemed to struggle with. In addition, a subset of these questions appeared on their exam \u2013 the knowledge survey therefore served as a review sheet.Wirth notes that the surveys need not take much class time and can be administered via paper or the web. The surveys can be significant for clarifying course objectives, structure, and design. For students, knowledge surveys achieve several purposes: they help make clear course objectives and expectations, are useful as study guides, can serve as a formative assessment tool, and, perhaps most critically, aid in their development of self-assessment and metacognitive skills. For instructors, the surveys help them assess learning gains, instructional practices, and course design.", "id": "<urn:uuid:9d6abf05-e21c-4917-ab95-cb9f3fd306aa>", "dump": "CC-MAIN-2013-20", "url": "http://serc.carleton.edu/acm_teagle/interventions", "file_path": "s3://commoncrawl/crawl-data/CC-MAIN-2013-20/segments/1368696381249/warc/CC-MAIN-20130516092621-00000-ip-10-60-113-184.ec2.internal.warc.gz", "language": "en", "language_score": 0.9568482041358948, "token_count": 746, "score": 3.578125, "int_score": 4}
{"text": "View Sample Pages Provides a detailed curricular calendar that's tied to a developmental continuum and the standards so you'll know not only what you should be teaching, but what your students are ready to embrace and what you can reasonably expect of them as successful readers and writers. Additionally, you'll find monthly units of study that integrate reading and writing so both work together to provide maximum support for your students. The units are organized around four essential components, process, genre, strategy, and conventions, so you're reassured you're addressing everything your students need to know about reading and writing. What's more you'll find ready-to-use lessons that offer exemplary teaching and continuous assessment, and a flexible framework that shows you how to frame a year of teaching, a unit, and a lesson\u2014and you can easily adapt all to fit the unique needs and interests of your own students. 240 pages + DVD (17 minutes) & fold-out color year-long planner .", "id": "<urn:uuid:589b573a-7869-4a15-a5dd-7d9174baeb0b>", "dump": "CC-MAIN-2013-20", "url": "http://shop.scholastic.com/webapp/wcs/stores/servlet/ProductDisplayView?productId=114498&langId=-1&storeId=10751&catalogId=10004&sa_campaign=internal_ads/scholastic3_0/search", "file_path": "s3://commoncrawl/crawl-data/CC-MAIN-2013-20/segments/1368696381249/warc/CC-MAIN-20130516092621-00000-ip-10-60-113-184.ec2.internal.warc.gz", "language": "en", "language_score": 0.9565499424934387, "token_count": 193, "score": 3.03125, "int_score": 3}
{"text": "Fun Classroom Activities\nThe 20 enjoyable, interactive classroom activities that are included will help your students understand the text in amusing ways. Fun Classroom Activities include group projects, games, critical thinking activities, brainstorming sessions, writing poems, drawing or sketching, and more that will allow your students to interact with each other, be creative, and ultimately grasp key concepts from the text by \"doing\" rather than simply studying.\n1. A Year from Now\nWhere will Bone be and how will she be feeling a year from now? Write a one page description of Bone's life a year after the end of the book from Bone's perspective.\n2. The Monster Within\nWhen Bone's anger is described, it seems to grow and even take form. Take one of the descriptions for Bone's anger and rage and draw it.\n3. Bone's Poetry\nWrite a poem as if you are Bone. The poem can be...\nThis section contains 555 words|\n(approx. 2 pages at 300 words per page)", "id": "<urn:uuid:7da8e5fb-c5fb-415f-93c4-97d18531f703>", "dump": "CC-MAIN-2013-20", "url": "http://www.bookrags.com/lessonplan/bastardoutcarolina/funactivities.html", "file_path": "s3://commoncrawl/crawl-data/CC-MAIN-2013-20/segments/1368696381249/warc/CC-MAIN-20130516092621-00000-ip-10-60-113-184.ec2.internal.warc.gz", "language": "en", "language_score": 0.9415433406829834, "token_count": 210, "score": 4.3125, "int_score": 4}
{"text": "Marion Levine teaches English, Literature and Film Production at Los Angeles Center for Enriched Studies, Los Angeles, CA\nMeasure for Measure, Act 4 or 5\nWhat's On for Today and Why\nStudents will choose a character from Measure for Measure and create a \"back story\" for that character. This will encourage students to read the text closely looking for clues regarding a specific character's history. Students will re-read a portion of the text and then write about what has happened to the character before the play begins. They will then create an artifact, such as a diary or journal entry, written by the charcacter they have selected. This will allow them the opportunity to think like the character and to view the events of the play from a specific point of view.\nThis lesson will take two 40 minute class periods.\nWhat You Need\nMeasure for Measure, Folger Edition\nWhat To Do\n1. Explain the concept of a \"back story\" as the important events that occur to a character before the play begins. You may need to prompt students with questions such as:\nWhat was the character like as a child?\nIn what situation did he/she grow up?\nStudents will need to show how the script supports their choices.\n2. Have the students write a one or two page back story in either the first or third person.\n3. Divide students into small groups of 4 or 5 and have them re-read Act 4 or Act 5, combing throught the text for character details.\n4. Have students write a letter, diary or journal entry from their selected characters point of view (first person). This artifact should concern one or more characters in the play.\n5. For increased authenticity, appropriate for an \"Extra-Extended\" book, students could write their letter, diary entry using calligraphy, a handwriting font or on a piece of yellowed paper.\n6. Allow students time to read their pieces and share their artifacts with the class.\nHow Did It Go?\nWere students able to justify their choices with reference to the text? Did their artifacts accurately portray character traits that can be interpreted from the text? Were students able to convey a sense of the character's perspective through this activity?\nThis lesson could be applied to any fictional text that the students read in class. Through close reading and attention to a specific character, students are able to identify with, and understand the concerns of a character on a deeper level. Possible choices could include Jay Gatsby, Hester Prynne,and Atticus Finch.\nIf you used this lesson, we would like to hear how it went and about any adaptations you made to suit the needs of YOUR students.", "id": "<urn:uuid:86849ab7-4070-40ee-9f28-f23c0e6d4e97>", "dump": "CC-MAIN-2013-20", "url": "http://folger.edu/eduLesPlanDtl.cfm?lpid=863", "file_path": "s3://commoncrawl/crawl-data/CC-MAIN-2013-20/segments/1368696381249/warc/CC-MAIN-20130516092621-00000-ip-10-60-113-184.ec2.internal.warc.gz", "language": "en", "language_score": 0.9481241106987, "token_count": 553, "score": 4.0625, "int_score": 4}
{"text": "There are many aspects to learning the creation of interactive fiction. Here we mostly undertake to explain approaches to using Inform, and leave the larger questions of craft and design for elsewhere.\nThe two manuals\nThere are two interlinked manuals built into every copy of the Inform application: if you've downloaded Inform, you already have them. But they are also available to read or download separately from this website.\nWriting with Inform is an overview of the language, beginning with the simplest kinds of construction (such as building a map of rooms, objects, and doors) and working its way up to more advanced tasks. It is meant to be read more or less sequentially, since later chapters build on the ideas in earlier ones; though some of the late chapters (such as those covering numbers, activities, or advanced text) might reasonably be read out of order.\nThe Recipe Book approaches the problem of authorship from a different perspective. Instead of trying to teach the language from start to finish, it is organized for the author who wants to accomplish something specific, such as asking the player's name at the start of play or implementing a system of measured liquids. It shares the same set of examples that are keyed to Writing with Inform, but organizes them into a new order and accompanies them with text about design problems in creating interactive fiction, rather than explanation of language features.\nFollowing requests from partially sighted Inform users, we've also made two plain vanilla versions of the manual available - they have as little decoration or web design as possible, which means less clutter for screen-reading software to cope with. We offer a choice of:\nMinimally tagged HTML provides an archive containing the pages of the manuals and examples as vanilla-flavoured HTML files.\nWriting with Inform in plain text format is just what it claims to be - one single file containing only text, with no marking-up of any kind. This contains all of the examples, following the text in numerical order, but not the Recipe Book. (The whole idea of two interleaved manuals can't really be achieved in one flat text file.)\nWe receive occasional questions about publishing a printed form of the manuals. The answer is that we intend to do exactly that, in due course, but that we expect the current text will be revised wholesale once the system is more mature. (The same thing happened with Inform 6, with the appearance of the printed Designer's Manual in 2001 essentially marking the end of its design cycle.)", "id": "<urn:uuid:c705459a-3198-4027-997b-597db9ccd8f1>", "dump": "CC-MAIN-2013-20", "url": "http://inform7.com/learn/manuals/", "file_path": "s3://commoncrawl/crawl-data/CC-MAIN-2013-20/segments/1368696381249/warc/CC-MAIN-20130516092621-00000-ip-10-60-113-184.ec2.internal.warc.gz", "language": "en", "language_score": 0.9500200152397156, "token_count": 504, "score": 3.0, "int_score": 3}
{"text": "Topics covered: Encapsulation, inheritance, shadowing\nInstructor: Prof. Eric Grimson, Prof. John Guttag\nOPERATOR: The following content is provided under a Creative Commons license. Your support will help MIT OpenCourseWare continue to offer high quality educational resources for free. To make a donation or view additional materials from hundreds of MIT courses, visit MIT OpenCourseWare at ocw.mit.edu.\nPROFESSOR: Last lecture we were talking about classes, and object-oriented programming, and we're going to come back to it today. I'm going to remind you, we were talking about it because we suggested it is a really powerful way of structuring systems, and that's really why we want to use it, It's a very common way of structuring systems. So today I'm going to pick up on a bunch of more nuanced, or more complex if you like, ways of leveraging the power of classes. But we're going to see a bunch of examples that are going to give us a sense. I'm going to talk about inheritance, we're going to talk about shadowing, we're going to talk about iterators. But before get to it, I want to start by just highlighting, sort of, what was the point of classes? So I'll remind you.\nA class, I said, was basically a template for an abstract data type. And this was really to drive home this idea of modularity. I want the ability to say, I've got a set of things that naturally belong together, I'm going to cluster them together, I want to treat it like it's a primitive, I want to treat it like it's a float or an int or a string. Is this going to be a point or a segment or something different like that. So it's really a way, as I said, of just trying to cluster data together. And this is a notion of modularity slash abstraction where I'm treating them as primitives. But the second thing we talked about is that we also have a set of methods, using the special name method because we're talking classes. But basically functions that are designed to deal with this data structure. We're trying to group those together as well. So we cluster data and methods.\nSecond key thing we said was, in the ideal case, which unfortunately Python isn't, but we'll come back to that, in the ideal case, we would have data hiding, and by data hiding, which is sort of a version of encapsulation, what we meant was that you could only get to the internal pieces of that data structure through a proscribed method. Proscribed meaning it's something I set up. So data hiding saying, you would only access the parts through a method. And as we said, unfortunately Python does not enforce this. Meaning that I could create one of these data structures, ideally I'd have a method, that I'm going to see some examples of that I used to get the parts out, unfortunately in Python you could take the name the instance dot some internal variable you'll get it back. It is exposed. And this is actually just not a good idea. So I suggested in my very bad humor, that you practice computational hygiene and you only use appropriate methods to get the parts out. OK didn't laugh the joke last time, you're not going to laugh at it this time, I don't blame you. All right, and then the last piece of this is that we said the class is a template. When we call that class, it makes an instance. So class is used to make instances, meaning particular versions, of that structure, and we said inside the instances we have a set of attributes. Internal variables, methods, that are going to belong to that structure.\nOK, so with that in mind, here's what I want to do. I'm going to show you a set of examples, and I want to warn you ahead of time, the code handout today is a little longer than normal because we want to build essentially an extended example of a sequence of examples of classes. We're going to see the idea, of which we're gonna talk about, of inheritance or hierarchy, in which we can have classes that are specializations of other classes. We're gonna see how we can inherit methods, how we can shadow methods, how we can use methods in a variety of ways. So this is a way of suggesting you may find it more convenient to put notes on the code handout rather than in your own notes. Do whatever you like, but I just wanted to alert you, we're going to go through a little more code than normal.\nSo, the little environment I'm going to build is an environment of people. I'll build a simple little simulation of people. So I'm going to start off with the first class, which I've got up on the screen, and it's on your handout as well, which is I'm going to build an instance, or a class rather, of persons. I'm going to draw a diagram, which I'm gonna try and see if I can do well, over here, of the different objects we're going to have. So I've got, a class, and by the way a class is an object. Instances are also objects, but classes are objects. We're gonna see why we want that in a second. Because I'm gonna build an object, sorry a class, called a person. Now, let's walk through some of the pieces here. The first one is, there's something a little different. Remember last time we had that keyword class and then a name, that name, in this case, person says this is the name for the class, and then we would have just had the semicolon and a bunch of internal things. Here I've got something in parens, and I want to stress this is not a variable. All right, this is not a def, this is a class. I'm going to come back to it, but what this is basically saying is that the person class is going to inherit from another class, which in this case is just the built-in Python object class. Hold on to that thought, it's going to make more sense when we look at a little more interesting example, but I want to highlight that. All right now, if we do this, as I said before, we can create a version of a person, let me just call it per, person.\nOK? And what we said last time is, when we wanted to create an instance inside of this class definition, we've got one of those built-in things called init. I'm gonna again remind you, some of the methods we have, Underbar underbar init is going to be the thing that creates the instance. Actually slightly misspeaking, actually Python creates the instance, but it's one thing that fills it in. So in this case, I'm going to give it 2 arguments: Frank Foobar Now, you might have said, wait a minute, init here has 3 arguments: self, family name, and first name. So again, just to remind you, what we said happens here is that when I call this class, person, I'm creating an instance. We'll draw a little instance diagram down here. I'm going to give it the name per. And I should have said inside of person, we've got a set of things. We've got our underbar underbar init, we've got, what else do I have up there? Family name. And a bunch of other methods, down to say.\nWhat happens inside of Python is, when we called the class definition, person, it creates an instance, there it is. Think of it as a pointer to a spot in memory, and then what we do is, we call, or find, that init method, up here, and we apply it. And the first argument self, points to the instance. So this object here is what self looks at. Now you can see what init's going to do. It says, oh, inside of self, which is pointing to here, let me bind a variable, which was, can read that very carefully, it's family underbar name, to the value I passed in, which was 4. Same thing with first name. OK, so the reason I'm stressing this is, self we do not supply explicitly, it is supplied as pointing to the instance, it's giving us that piece of memory. And that is what then gets created. So here's, now, the instance for per. OK, and I put a little label on there, I'm going to call that an isALink, because it is an instance of that class. God bless you.\nAll right, so once we got this, let's look at what we can do with person. That's why I built person here. And as I said, I've already bound basically, those two pieces. If I want to get a value out, I can give person, or per, rather, this instance, a messaging. In this case I want to get family, what did I say, family name out, now, again I want to stress, what is happening here? per is an instance, it's this thing here. When I say per dot family name, I'm sending it a message, in essence what that does is, it says, from here it's going to go up the chain to this class object and find the appropriate method, which was family name. It is then going to apply that to self, which points to this instance. And that allows it, therefore, is you can see on the code, to look up under self, what's the binding for family name, and print it back up. So self is always going to point to the instance I want and I can use it. OK what else do we have in here? We can get the first name, that's not particularly interesting.\nWe've got 2 other special methods: that's cmp and str. All right, cmp is our comparison method. And since I, I was about to say I blew it last time, I misspoke last time, a wonderful phrase that politicians like to use, I misspoke last time. Let me clarify again what cmp will do. Underbar underbar cmp is going to be the method you're going to use to compare two instances of an object. Now, let's back up for second. If I wanted to test equality, in fact I could use underbar underbar eq, under under. It's natural to think about an equality tester as returning a Boolean, it's either gonna be true or false, because something's either equal to or not. In many languages, comparisons also return Booleans, which is why I went down this slippery slope. For many languages, either it's greater than or it's not. But Python is different. Python use cmp, in fact it has a built in cmp, which is what we're relying on here. Where am I, right there. And what cmp returns is 1 of 3 values. Given 2 objects, it says if the first one is less than the second one, it returns -1, if it's equal it returns 0, if it's greater than, it returns 1.\nSo it allows you this broader range of comparisons. And if you think about it, cmp, you could apply on integers, you could apply it on floats, apply it on strings. So it's overloaded, it has the ability to do all of those. And in this case what we're saying is, given 2 objects, let's create a tuple of the first, sorry, family and first name of ourselves, and other is another object, family and first name of that, and then just use cmp to compare them. All right, so it's going to use the base pieces. OK, so it gives me a way of doing comparisons. And str we saw last time as well, this is cmp does comparison, and str is our printed representation.\nOK. So what we've got now, is a simple little class. We've also got two methods there. I want to look at them, we're gonna come back to them, but they start to highlight things we can do with our classes. So I've built one simple version of it here, which is per. And notice I've got another method, right up here, called say. And say takes two arguments, for the moment the second argument, or the first argument's, not going to make a lot of sense, but say takes two arguments besides itself. It's going to take another object to which it's saying something and the thing to say. Since I only have one object here, I'm going to have person talk to himself. You may have met a few other undergraduates who have this behavior. I'll have him talk to himself and say, just some random message the faculty members occasionally worry about. OK, what does this thing do? Now you're going to see some of the power of this. Again, remember, I'm down here, I'm sending this the message say, it's going to go up the chain to find the say message in person. And what does say do, it says given another object and some string, it's going to return, oh, and interesting things, part of which you can't see on the screen. First what it does, is it gets first name of self. Remember self is pointing to this instance, so it's simply looks up that binding, which is Frank. It's going to create a string in which it adds to that the family name of self, and then another thing that says to, and then ah, I'm now going to send a message to the other object, saying give me your first name. Going to add that to the second piece, and you can see in this case it happens to be the same first and family name. And then at the end of it, which you can't see here but you can see in your handout, I just append the whole string, so it spits it out.\nWhat's the point of this, other than I can get it to say things? Notice, I can now reference values of the instance. But I can also get values of other instances, by sending in a message. And that's why we have that form right there. And then it glued all together. If you think about this for a second, you might say, wait a minute, actually you might have said wait a minute a while ago, why am I just using the variable name there in the function over here? Well in fact, I could've used the function here, first name open close, right? It would have done the same thing. But because I know I'm inside the instance, it's perfectly reasonable to just look up the value. OK, I could have, although I don't want you to do it, have done the same thing there and used underbar, sorry, first name underbar, sorry, first underbar name, but that's really breaking this contract that I want to happen. I should send the message to get the method back out. So again the standard practices is if you know you're inside the object, you can just access the values. If you're doing it with any other objects, send it a message to get it out.\nOK, now, that gives you an ability to say, let's look at one more example here, and then we're going to start building our hierarchy, which is, that this person can also sing. And we've got a little sing method here. And notice what it does, it's going to sing to somebody, I guess you're part of the Chorallaries. You're going to sing something, and notice what it does, it's simply going to use its say method, but add at the end of whatever's being said, just tra la la at the end. So this is now an example of a method using another method. Why would you want that? It's nice modularly. I have one method that's doing saying, I have another method that's just building on it. So if I have is person sing to themselves, not a highly recommended activity, it would help if I had it sing to itself, not sing to sing, sorry about that. Notice what it does. Looks like exactly like a say method, except it's got tra la la at the end. Don't worry I'm not going to sing to you. I'll simply say the words. Power of this, other than the silly examples. You see how I can access variables of the instance, how I can access variables of other instances, going to come back to that, and how I can use versions of my own methods to implement other methods. In this case sing is using say as part of what it wants to get out.\nOK, so we got a simple little example. Now, let's start adding some other pieces to this. OK, and what do I want to add. Find my spot here. OK, we're going to add an MIT person. Sorry, machine is -- do this, let's go down. OK so I'm going to add an MIT person. Look at the code for second. Aha! Notice what this says. MIT person says it inherits from person. That is, that's the first thing in parens up there. It says, you know, class of MIT person is person. What that is saying is, that this is a specialization of the person class. Or another way of saying it is, we have a super class, in this case it's person. And we have a subclass, in this case its MIT person. And we're going to walk through some examples, but what it says is that that subclass of MIT person can inherit the attributes of the person class. Can inherit the methods, it can inherit variables.\nOK, what does MIT person do? Well, here's 1 of the new things it does. It has a local variable called next id num, which is initially set to 0. See that up there. And then it's got some methods, it's got an init method, a get id method, a few other things. OK, let's run this. In particular, I go back down to this one. Let me just uncomment this and do it here. Assuming my machine will do what I want it to do, which it really doesn't seem to want to do today. Try one more time. Thank you, yep. Still not doing it for me, John. OK, we type it. No idea what Python doesn't like me today, but it doesn't. So we're gonna define p 1, I've lost my keyboard, indeed I have. Try one more time. p 1 MIT person, see how fast I can type here -- OK, now, let's look at what the code does, because again it's going to highlight some things. I called MIT person, push this up slightly, it's going to create an instance down here, I called p 1. And when I would do that, I'm gonna initialize it. So I've got, right up here, an initializer, init for MIT person, takes in the family name and the first name. Notice what it does. Huh. It says, if I'm sitting here at MIT person, I'm going to go up and inherit from person its init function and call it. And what am I calling it on? I'm calling it on self, which is pointing to this object, so I've still got it, and then I'm then going to apply the base initialization. And that does exactly what you'd expect, which is just going to create a binding for family name down here. As well as some other things. So this is an example of inheritance. MIT person inherits the init method from person, can get access to by simply referring to it, and I refer to it right there. And it's take the person class, get its init and apply it to my instance plus those things. So I'm just using the same piece of code\nNotice the second thing it does. It says inside of self, I'm going to bind the local variable id name to the value of next id name in MIT person. Self is down here, id num, sorry, not id name. I'm going to bind that to the value that I find my going up to here, which is 0, and having done that, I simply increment that value. OK? So what has this done? It says I now have captured in the class, a local variable that I can keep track of. And when I use it, every time I generate an example, let me build another one. I make p 2 another MIT person. OK, I can do things like saying, what is the id number for each of these. First one is 0, second one is 1, which makes sense, right? I'm just incrementing a global variable. Now, things I want you to see about this. Now that I've got a beginning of a hierarchy, I have this notion of inheritance. I can ask a function inside one class to use a function from a class that it can reach by going up the chain. I just did it there. I can ask it to go get values of variables, right, so that looks good. What else do we have in person or MIT person? Well, we can get the id number, we just did. We have a thing to do with this string. Notice it's going to print out something a little different. In fact, there's a kind of funky form there. Which just says, if I want to print it out, I'm gonna create, what this says to do is, I'm gonna create an output template that has that structure to it, but where I see that percent s I'm going to substitute this value for the first one, that value for the second. So if I say, what is p 1? It says ok, MIT person Fred Smith. On the other hand, if I said, what is per, which is that thing I build earlier, it had a different string method, which is just print out person, those pieces.\nAll right, one last piece to this and we're going to add to it. Suppose I want Fred to say something. Say something to Jane. OK, he said it. Where's the say method? OK, Fred is an instance of an MIT person. where's the say method? Well, there isn't one there, but again, that's where the hierarchy comes in. Fred is this object here, I'm sending it the message say. That turns into going up the chain to this object, which is the class object, and saying find a say method and apply it to that instance. Fudge-knuckle, it ain't here. Don't worry about it, because it says if I can't find one there, I'm going to go up the chain to this method, sorry to this class, and look for a method there. Which there was one, I have a say method. It's going to use that say method. Apply to it. Well, you might say, OK, what happens if it isn't there? Well, that's where, remember I defined person to be an instance of an object, it will go up the chain one last time to the base object in Python to see is there a method there or not. Probably isn't a say method for an object, so at that point it's going to raise an exception or throw an error. But now you again see this idea that the inheritance lets you capture methods.\nNow you might say, why not just put a say method inside of MIT person? Well, if you wanted it to do something different, that would be the right thing to do. But the whole notion here's that I'm capturing modularity, I've got base methods up in my base class. If I just want to use them I'm just going to inherit them by following that chain, if you like, basically up the track. OK, so we've got an MIT person, we can use that. Let's add a little bit more to our hierarchy here. I'm going to create, if I can do this right, a specialization of an MIT person, which is an undergraduate. A special kind of MIT person. All right, so if I go back up here, even though my thing is not going to let me do it, let's build an undergraduate. OK, there's the class definition for an undergrad. We're just starting to see some of the pieces, right, so in an undergraduate, where am I here, an undergraduate. OK, it's also got an initialization function. So if I call undergrad, I'm gonna make an undergrad here, again let me go back down here, line ug 2 it's making undergrad, Jane Doe. Now, what happens when I do the initialization here? Notice what goes on. It simply calls the person initialization method. All right, so I'm down here. I'm going to call the person initialization method, what did do? Sorry, the MIT person method, it calls the person method. Just walking up the chain, that's going to do exactly what I did with all the other ones, so I now have a family name and a first name. So I can, for example, say family name and get it back out. All right?\nAnd then, other things that I can do, well I can set what year the person's in, I can figure out what year they're in, there's this unfortunate overflow error if you've hung around too long, but that's not going to happen to you. And I've now got a say method here, so let's look what happens if I ask the undergraduate to say something. OK, it's not a realistic dialogue I know, but, what did this method do? I asked this object to do a say. And notice what it does. It simply passes it back up to MIT person. There's that inheritance again. It's saying, I'm going to have my base say method say something. I'm going to say it to a person, but all I'm going to do because undergraduates in my experience, at least, are always very polite, I'm going to put \"Excuse me but\" at the front of it. OK, what am I trying to show you here? I know the jokes are awful, but what am I trying to show you here? That I can simply pass up the chain to get it. In fact, what method does the final say here? What class does it come from? Person class, yes, thank you. It goes all the way up to person, right, because MIT person didn't have a say. So I can simply walk up the chain until I find the method I want to have.\nNow this is an example of shadowing. Not a great example, but it's a beginning example of shadowing, in that this same method for an undergraduate, shadows the base say method, it happens to call it, but it changes it. It puts \"Excuse me but\" at the front, before it goes on to do something. Now again, I could have decided here to actually copy what the original say method did, stitch all the other things together. But again, that loses my modularity. I'd really to only have to change it in one place. So by putting my say method up in person, I can add these nuances to it, and it lets me have something that has that variation. If I decide I want to change what say does, I only have to change it in one place. It is in the person class definition, and everything else will follow through for free.\nOK, so now I've got an undergrad, right? Let's look at a couple of variations of what happens here. So first of all, I can -- yes?\nPROFESSOR 2: Shadowing here is often sometimes called overriding.\nPROFESSOR: Yes, thank you, because I'm going to do a pure example of shadowing in a second, John right. Also called overriding. Part of the reason I like the phrase shadow is, if you think about it as looking at it from this direction, you see this version of init before you see the other ones, or you see that version of say, but it is overriding the base say example. OK, so I can say, what does p 1, sorry, yes, what does undergrad look like? And I said wait a minute, MIT person, not undergrad, is that right? Well, where's the str method? I didn't define one in undergrad, so it again tracks up the chain and finds the str method here, so it's OK undergrads are MIT people most the time, so it's perfectly fine.\nOK, now, I have built into this also these cmp methods. So I've got two examples. I've got undergrad, or ug. And then I've got poor old Frank Foobar back there, per person. So suppose I want to compare them? What do you think happens here? Compare sounds weird, right, I compare an undergraduate to a person. I don't know what that's doing, some kind of weird psychological thing, but what do you think happens in terms of the code here if I run this. I know it's a little hard because you got a lot of code to look at. Do I have a cmp method defined somewhere? Yeah. So, it's hard to know what it's going to do, but let's look at it. Hmm. Now sometimes I type things and I got errors I don't expect, this one I did expect. So what happened here? Well let's talk about what happens if I do that comparison I was doing, what was I doing? Ug greater than per? What unwinds into is, I'm going to send to ug, that instance, a cmp method. This is really going to become something like ug dot under under cmp under under applied to per. I think that's close.\nWhat does that do? It says starting in ug, I'm going to look for the first cmp method I could find, which is actually sitting here. I had a cmp method in MIT person. If you look at your code, what does it do? It looks up the id numbers to compare them. Well the, ug has an id number because it was created along this chamber. Remember per over here was just created as a person. It doesn't have an id number, so that's why it complaints. Ok, happens if I do that? Compare per to ug. How many people think I get an error? Wow. How many people think I'm going to get either true or false out of this? A few brave hands. Why? Can I ask you, please? Why do you think I'm going to get a, doesn't matter whether it's true or false, why am I going to have something work this time that didn't work last time?\nPROFESSOR: Yeah, exactly. And in case you didn't hear it, thank you, great answer, sorry, terrible throw. In this case I'm using per, that's the first part, so it's not symmetric. It's gonna use per to do the look up. And as it was said there, per over here goes up and finds a cmp method here which it can apply. In that case, it simply looked at, remember, it took the tuples of first and last name which are both defined here, and did some comparison on that. So this is a way of again pointing out to you that the things are not always symmetric, and I have to be careful about where do I find the methods as I want to use them.\nOk? All right. Let's add, I'm gonna do two more classes here. Let's add one more class, some people debate whether these are really people or not, but we're going to add a class called a professor. OK. Now what am I doing? I'm creating another version of class down here. Which again is an instance, or a subclass, sorry, not an instance, a subclass of an MIT person. I see that because I built it to be there. Again I've got an initialization that's going to call the person initialization, which we know is going to go up -- I keep saying that -- going to call the MIT person initialization, which is going to go up and call this one. So again I'm going to be able to find names. And I do a couple of other different things here. I'm gonna pass in a rank, full professor, associate professor, assistant professor, which I'm just going to bind locally. But I'm gonna add one other piece here, which is I'm gonna add a little dictionary on teaching. So when I create a professor, I'm gonna associate with it a dictionary that says, what have you been teaching?\nAnd then notice the methods I create. I've got a method here called add teaching, takes, obviously a pointer to the instance. A term, which will just be a string, and a subject. And let's look at what it does right here. OK. In fact the call I'm going to make, I'm not certain I'm going to be able to get away with it, my machine is still wonderfully broken, all right, it is, let me just show you what the calls would look like. As you can see here I'm not going to be able to do them. But I'm going to add teaching, as a method call with this with a string for term, and a subject number. What is this going to do? Yeah, I know I'm just worried if I restart Python, I may not be able to pull the thing back in, so I'm going to try and wing it, John, and see if I can make it happen.\nRight, what does that teaching do? It's got one of those try except methods. So what does it say it's going to do? It's going to go into the dictionary associated with teaching, under the value of term, and get out a list. And it's going to append to the end of the list the new subject. So it's going to be stored in there, is then going to be term, and a list of what I taught, in case I teach more than one thing each term. It's going to do that, but notice it's a try. If in fact there is no term currently in the dictionary, started out empty, it's going to throw an error, sorry, not throw an error, it's going to raise an exception. Which is a key error, in which case notice what I'm going to do, I'm not going to treat it as an error. I'm simply going to say, in that case, just start off with an empty, with an initial list with just that subject in and put it in the dictionary. As I add more things in, I'll just keep adding things to this dictionary under that term. And if I want to find out what I'm doing, well I can use get teaching, which says given the term, find the thing in the dictionary under that term and return it. If I get an error, I'm going to raise it, which says there is nothing for that term, and in that case I guess I'm just going to return none.\nOK? And then the other two pieces we're going to have here, and we want to look at a little more carefully, I just wanted to show you that example, is a professor can lecture, and a professor can say something. Look at the say method, because this now add one more nuance to what we want to do here. And I think in interest of making this go, let me actually, since I'm not going to get my machine to do this right, let me create a couple of professors. If I look at what that is, it's an MIT person because I didn't have any separate string thing there, and we will create a more important professor. What rank do you want, John? Do you want to stay full?\nPROFESSOR 2: Undergraduate.\nPROFESSOR: Undergraduate, right, a lot more fun I agree. Sorry about that, and we can again just see what that looks like. And that of course, we'll print out, he's also an MIT person. But now here's what I want to do. I want to say something to my good colleague Professor Guttag. Actually I'm going to start a separate -- I'm going to say something to a smart undergraduate. So if I say, remember we have ug defined as an undergraduate, let me do something a little different here. Well let, me do it that way. It says, I don't understand why you say you were enjoying 6.00. Not a good thing to say, right, but if I say to my good colleague Professor Guttag. I have to spell say right, I know, I need help with this, what can I say? We flatter each other all the time. It's part of what makes us feel good about ourselves. Why is the sky blue? I enjoyed your paper, but why is the sky blue?\nOK, terrible examples, but what's going on here? One more piece that I want to add. Here's my say method for professor, and now I'm actually taking advantage of to whom I am saying something. Notice again, what does it do? There's the self argument, that's just pointing to the instance of me. I'm passing in another argument, going to call it to who, in one case it was ug, in one case it was Guttag. And then the thing I want to say, ah, look what it does, it says, check the type. And the type is going to take that instance, I had an instance, for example, of a professor down here, and it's going to pick up what type of object it is. So if the type of the person I'm speaking to is undergrad, let's pause for second. Remember I started away back saying we're building abstract data types. Well, here's a great example of how I'm using exactly that, right? I've got int, I've got float, I now have ug, it's a type. So it's says if the object to whom I'm speaking is an undergrad, then use the same method from person where I'm going to put this on the front. On the other hand, if the object to whom I'm speaking is a professor, then I'm going to tag this on the front and use the underlying say method. On the other hand, if I'm speaking to somebody else, I'm just going to go lecture. All right, and when a professor lectures, they just put it's obvious on the end of things, as you may have noticed.\nWhat's the point I want you to see here? I'm now using the instances to help me to find what the code should do. I'm looking at the type. If the type is this, do that. If the type is this, do something different, ok? And I can now sort of build those pieces up. OK, I said one more class. Notice what we're doing. I know they're silly examples, but, sorry, they are cleverly designed examples to highlight key points. What I'm trying to do is show you how we have methods inherit methods, how have message shadow methods, how we have methods override methods, how we can use instances as types to define what the method should do.\nLet me show you one last class, because I'm gonna have one more piece that we want to use. And the last class is, sort of, once you've got a set of professors, you can have an aggregate of them. And I don't know, if a group of geese are gaggle, I don't know what a set of professors are, John. Flamers? I, you know, we've got to figure out what the right collective noun here is. We're going to call them a faculty for lack of a better term, right? Now the reason I want to show you this example is, this class, notice, it only is going to inherit from object. It actually makes sense. This is going to be a collection of things, but it's not a subclass of a particular kind of person. And what I want the faculty to do, is to be able to gather together a set of faculty. So if I go down here, grab this for second, and pull it down so you can see it. It looks like I'm not going to be able to run this because my machine is broken, but basically I'm gonna define a set of professors, and then I'm gonna create a new class called faculty. There's the definition of it. It's got an init. You can kind of see what it does. It's going to set up an internal variable called names, which is initially an empty list, internal variable called ids, which is empty, an internal variable called members, which is empty, and another special variable called place, which we're going to come back to in a second, initially bound to none.\nOK, I've got a method called add which I'm going to use down here to add professors to the course 6 faculty. Here's what I want to add to do. First of all, notice I'm going to check the type. If this is not a professor, I'm gonna raise an error, a type error, it's the wrong type of object to pass in. The second thing I'm gonna do is say, if that's okay, then let me go off and get the id number. Now remember, that's right up here, so I'm asking the instance of the professor to go up and get the id number. And I want to make sure I only have one instance of each professor in my faculty, so if the id number is in the list of ids already, I'm going to raise an error, sorry, raise an exception as well, saying I've got a duplicate id. OK? And the reason that's going to come up is, notice what I do now. Inside of the instant self, I take the variable names and I add to it the family name of the person I just added. OK, notice the form. I'm using the method, there's the parens to get the family name of the person. I'm just adding it to the list. I've got the id number, I've added the ids, and I add the object itself into members. So as I do this, what am I doing? I'm creating a list, actually several lists: a list of ids, a list of the actual instances, and a list of the family names. And as a cost I want to add, that's why I can check and see, is this in here already or not?\nNow, the last reason I want to do this is, I want to be able to support things like that. This is now different, right, this instance is a collection. I want to be able to do things like, for all the things in that collection, do something, like print out the family names. And to do that, I need two special forms: iter and next. OK, now let me see if I can say this cleanly. Whenever I use a for, in structure, even if it was on just a normal list you built, what Python is doing is returning an, what is called an iterator. Which is something that we talked earlier. It's keeping track of where are you in the list, and how do I get to the next thing in the list?\nI'm going to do the same thing here, and I'm going to create it for this particular structure. So this little thing iter, when I call a for something in, one of these instances, it calls iter, and notice what it does. It initializes place to 0. That was that variable I had up there. That's basically saying I'm at the beginning of the list. It's a pointer to the beginning of the list, and it returns self. Just gives me back a pointer to the instance. That now allows me at each step in that loop to call next. And what does next do? Next says, check to see if that value is too long, if it's longer than, for example, the list of names, raise an exception called stop iteration, which the for loop will use to say OK, I'm done. I'm going to break out of the for loop. Otherwise, what am I going to do? I'll increment place by 1, that's going to move me to the next place in the list, and then in this case I'll just return the instance itself, right? Members is a list of instances, place I've incremented by 1, I take 1 off of it, I get to it. So iter and next work together. Iter creates this method, that's going to give you a pointer to the place in the structure, and then next literally walks along the structure giving you the next element and returning elements in turn so you can do something with it.\nRight, so now what that says is, I can have classes that just have local variables. I can have classes that get methods from other variables, and I can also have classes that are collections. And I've supported that by adding in this last piece. OK once you have all of that, in principle we could start doing some fun things. So let's see what happens if we try and make all of this go. And let me, since I'm not going to be able to run it, let me simply do it this way. If I have my undergraduate, ug. I can -- sorry, let's not do it that way -- I can have undergraduate say things like -- all right, what did I just do wrong here? Do I not have undergrad defined? I do. Oh, I didn't have Grimson, sorry, it's me, isn't it? Thank you. The undergraduate very politely asks why he didn't understand, you can have the professor respond. Again, it simply puts a different thing into there. On the other hand, if Professor Guttag asks me something about understanding, I say I really like this paper on, you do not understand, it's a deep paper on programming languages 5, I think, John, isn't it? What else can you do with this thing, right? You can have an undergraduate talk to an undergraduate, in which case they're still polite. Or you could have -- sorry, let me do that the other way -- you could also have an undergraduate simply talk to a normal person. All right, but the good news is you know eventually you get it done, and when you're really done you can have the undergraduate be really happy about this, and so she sings to herself.\nOK it's a little silly, but notice what we've just illustrated. And this is where I want to pull it together. With a simple set of classes, and the following abilities, an ability to inherit methods from subclasses, sorry from superclasses, that is having this hierarchy of things. I can create a fairly complex kind of interaction. I can take advantage of the types of the objects to help me decide what to do. And if you think about that, I know it sounds very straightforward, but you would do exactly that if you were writing earlier code to deal with some numerical problem. All right, if the thing is an integer, do this, if it's a float, do that, if it's a string, do something else. I'm now giving you exactly the same ability, but the types now can be things that you could create. And what I've also got is now the ability to inherit those methods as they go up the chain. So another way of saying it is, things that you want to come away from here, are, in terms of these classes. We now have this idea of encapsulation. I'm gathering together data that naturally belongs as a unit, and I'm gathering together with it methods that apply to that unit. Just like we would have done with float or int. Ideally, we data hide, we don't happen to do it here, which is too bad.\nBasically we've got the idea of encapsulation. The second thing we've got is this idea of inheritance. Inheritance both meaning I can inherit attributes or field values. I can inherit methods by moving up the chain. I can also the shadow or override methods, so that I can specialise. And I do all of that with this nice hierarchy of classes. So what hopefully you've seen, between these two lectures, and we're going to come back to it in some subsequent lectures, is that this is now a different way of just structuring a computational system. Now, you'll also get arguments, polite arguments from faculty members or other experts about which is a better way of doing it. So I'll give you my bias, Professor Guttag will give you his bias next time around. My view, object-oriented system are great when you're trying to model systems that consist of a large number of units that interact in very specific ways. So, modeling a system of people's a great idea. Modeling a system of molecules is probably a great idea. Modeling a system where it is natural to associate things together and where the number of interactions between them is very controlled. These systems work really well. And we'll see some examples of that next week. Thanks.", "id": "<urn:uuid:356021a3-01be-42dc-ae50-e22e74e8edfd>", "dump": "CC-MAIN-2013-20", "url": "http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00-introduction-to-computer-science-and-programming-fall-2008/video-lectures/lecture-16/", "file_path": "s3://commoncrawl/crawl-data/CC-MAIN-2013-20/segments/1368696381249/warc/CC-MAIN-20130516092621-00000-ip-10-60-113-184.ec2.internal.warc.gz", "language": "en", "language_score": 0.9743210077285767, "token_count": 10357, "score": 3.140625, "int_score": 3}
{"text": "What level of LabVIEW user are you\u2014a developer, engineer, or architect? Is it even important?\nAbsolutely. These categories make it easy for NI to tailor helpful resources to your individual needs. By visiting the LabVIEW Skills Guide, you can see what defines these levels and which trainings or guides we recommend each use to help them develop successful applications faster.\nHere are a few examples of skills you can learn from the latest guide:\nFor Technicians or Basic Developers\n- Troubleshoot and debug LabVIEW code\n- Apply key LabVIEW elements for relating data (such as arrays, clusters, and typedefs)\n- Apply design patterns and templates\nFor Software Engineers\n- Optimize reuse of existing code for your projects\n- Design, implement, document, and test code modules for each task\n- Derive a task list and high-level flowchart to guide design and development\nFor Software Architects\n- Analyze, critique, and improve the architecture of a LabVIEW application\n- Optimize code and resources to effectively reduce development time and costs\n- Design an application using object-oriented design principles\nBest of all, many of these resources are free or available at a discounted price for students. Questions? Post your comments below and we\u2019ll follow up on them personally.", "id": "<urn:uuid:b0368fa0-d959-46ef-bb6d-cf0b106734d1>", "dump": "CC-MAIN-2013-20", "url": "http://labviewni.com/category/cla/", "file_path": "s3://commoncrawl/crawl-data/CC-MAIN-2013-20/segments/1368696381249/warc/CC-MAIN-20130516092621-00000-ip-10-60-113-184.ec2.internal.warc.gz", "language": "en", "language_score": 0.8850432634353638, "token_count": 267, "score": 2.515625, "int_score": 3}
{"text": "Complete the following test so you can be sure you understand the material. Your answers are private, and test results are not scored.\nWhen you create a new table in Datasheet view, you must define a primary key field.\nYou can't use the Lookup Wizard to alter an existing value list.\nWhen you use a template to create a table, you must set data types for the fields in the new table.\nWhich of the following is the correct syntax for a value list?\n'Option 1','Option 2','Option 3'\n\"Option 1\";\"Option 2\";\"Option 3\"\n\"Option 1\":\"Option 2\":\"Option 3\"", "id": "<urn:uuid:21328ea9-4f20-4eeb-8f36-e480bf4e97a9>", "dump": "CC-MAIN-2013-20", "url": "http://office.microsoft.com/en-us/training/test-yourself-RZ010288610.aspx?section=9", "file_path": "s3://commoncrawl/crawl-data/CC-MAIN-2013-20/segments/1368696381249/warc/CC-MAIN-20130516092621-00000-ip-10-60-113-184.ec2.internal.warc.gz", "language": "en", "language_score": 0.7421594262123108, "token_count": 136, "score": 2.5625, "int_score": 3}
{"text": "See also the\nDr. Math FAQ:\norder of operations\nBrowse High School Basic Algebra\nStars indicate particularly interesting answers or\ngood places to begin browsing.\nSelected answers to common questions:\nSolving simple linear equations.\nPositive/negative integer rules.\nCompleting the square.\nDirect and indirect variation.\nInequalities and negative numbers.\n- Normalization [08/01/2001]\nHow do I figure out: 90 + 70 + 88 + 94 + x / 5 = 85 ?\n- The Nth Root of N [11/28/2000]\nIs the nth root of n (a whole number other than 1) ever a rational\n- Number of Equations Needed in a Simultaneous Linear System [10/29/2003]\nCould you tell me why we need the same number of equations as\nvariables in order to get a unique solution to a system of\nsimultaneous linear equations?\n- Number * Sum of Remaining Four Numbers [04/03/2003]\nFind 5 numbers such that when each number is multiplied by the sum of\nthe remaining 4 numbers, the following values will result: 152, 245,\n297, 320, 360.\n- Objects in a Pyramid [7/8/1996]\nObjects are stacked in a triangular pyramid... how many objects are in\nthe nth layer from the top?\n- Old Test Questions Answered [1/23/1995]\nI am studying for my midterm, and I've come across two questions that I\ngot wrong and don't understand why....\n- One Variable Equations with Decimals [02/11/1997]\nHow do you solve 8.25x + 3 = 17.5 + x?\n- Open Sentence, Statement [09/18/2001]\nWhat is an open sentence?\n- Operator Precedence [08/13/2003]\nSince the following statement is true: (1+1)**(5-2) is 8, why is the\nfollowing statement true and not false: 2**1+1 is 3 and not 4, and\n3*1**3 is 3 and not 27...' ?\n- Ordering Exponents and Variables [04/08/2000]\nIs there a rule for putting terms in descending order if the variables\nhave the same exponent? What about negative exponents and descending\n- Ordering Products, Powers, and Parameters of Trigonometric Functions [10/31/2010]\nA student wants to know how to unambiguously interpret strings of trigonometric\nfunctions, multiplication, and exponentiation. Doctor Peterson digs into a history book\n-- as well as another math doctor's conversation -- to illuminate the vagaries of the\n- Order in Linear Expressions [11/20/2001]\nCan you give me a convincing argument as to why, in an equation such as\ny=13-7x, where y is a function of x, it should be written as y=-7x+13?\n- Order of Operations [05/19/1999]\nGiven a, b, x, and y, find ax/by.\n- Order of Operations with Percentages [04/05/2001]\nWhy does the order of operations exclude percentage, square roots, etc.?\n- Other Ways to Get the Quadratic Formula [02/19/2010]\nDoctor Jacques shares two ways to derive [-b +/- SQRT(b^2 - 4ac)]/2a\nwithout explicitly completing the square.\n- Pairs of Odd Integers [09/24/1997]\nFind all pairs of odd integers a and b that satisfy the equation: a +\n128b = 3ab.\n- Parabola with Horizontal or Vertical Axis [05/03/2001]\nHow can I find the focus and directrix of a parabola whose axis is either\nhorizontal or vertical, like 2x^2 = -y?\n- Parabolic Golf Shot Equations [01/24/2002]\nDoes the ball reach the green?\n- Parallel and Perpendicular Lines [01/14/1999]\nHow do you tell without graphing whether the graphs of these equations\nare parallel, perpendicular, or neither?\n- Parallel Lines [12/31/1998]\nWhat are some ways of proving lines parallel - geometrically and\n- Parametric Form for Equation of a Line [6/30/1996]\nHow can you convert an equation such as y = -3x/4 + 7/2 to parametric\n- Parity [8/2/1996]\nHow do I determine if the given function is odd, even or neither? What's\nthe symmetry of the graph?\n- Partial Fractions [01/29/1998]\nHow do I express 3/1-(x^3) in partial fractions?\n- Pascal's Triangle Pattern [04/22/1999]\nWhat pattern does multiplying each entry by 1, 2, 3, 4, 5... in order,\nand adding the products yield?\n- Perfect Square: Solving Two Equations [6/14/1996]\nx^2 + 5 is a perfect square, and x^2 - 5 is a perfect square.\n- Perimeter Equals Area in a Triangle [4/2/1996]\nWhen will the area and perimeter of a right triangle be numerically\n- Picture Frame, Triangle Measurements [5/20/1996]\nMy teacher gave us ten questions to answer and I could do all except two:\n1) A framed rectangular picture is 35cm long and 25cm wide... 2) The base\nof a triangle is 9cm more than the perpendicular height...\n- Plus or Minus Sign [03/08/2002]\nWhat does this equation mean: y = +- k ? The - sign is directly under the\n- Point Equidistant from 3 Other Points [04/11/1999]\nHow do you find a point that is equidistant from three other points?\n- Point on a Line [03/23/2001]\nCan you please tell me a formula to find if a point exists on a line?\nBoth are in x,y form.\n- Polynomial Brain-Twisters [12/4/1995]\nI'm stumped on some similar polynomial problems...\n- Polynomial Degrees and Definition of a Field [03/02/1998]\nThe degree of polynomials added together, and definition of a field.\n- Polynomial Factoring Rules [04/02/1997]\nHow do I apply the polynomial factoring rules to t^21+1 and 25y^2-144 =\n- Polynomial Problem [3/11/1995]\nA remainder of 9 results when the polynomial p(x) is divided by x-2, a\nremainder of -3 when p(x) is divided by x+2, and a remainder of 3 when\ndivided by x-1. Find the remainder when p(x) is divided by (x-2)(x+2)(x-\n- Population and Percentage [03/07/1999]\nGiven population data, find the number of women in two different years.\n- Positive Unit Fractions [10/02/2002]\nFind five different positive unit fractions whose sum is 1. (A unit\nfraction is a fraction whose numerator is 1. All denominators must\nalso be natural numbers.)\n- Precedence of Unary Operators [09/01/99]\nThe PEMDAS rule for order of operations ignores unary operators. Can you\nexplain the proper precedence for them, and give an example showing how\nnot knowing the rule can cause an incorrect result?\n- Preparing for an Algebra Test [11/1/1995]\nA 9th grade math student asks for help preparing for final exams. What is\nthe difference between the terms: solve and simplify? How do you find the\ngradient in a graph?\n- Prize Money [09/04/1997]\nIf first prize wins $1,000 out of $6,000 and twentieth prize wins $100,\nhow much money do second through nineteenth place win? Is this a\n- Probability of a Function Having Complex Roots [05/11/2000]\nWhat is the probability that the function f(x) = x^2 + px + q = 0 will\nhave complex roots when p and q lie between 0 and 1? ...when p and q lie\nbetween 0 and 5? ...when p and q are greater than 0?", "id": "<urn:uuid:7308a886-f8d1-4f71-a8ac-74e6e4712804>", "dump": "CC-MAIN-2013-20", "url": "http://mathforum.org/library/drmath/sets/high_algebra.html?start_at=441&num_to_see=40&s_keyid=38309224&f_keyid=38309225", "file_path": "s3://commoncrawl/crawl-data/CC-MAIN-2013-20/segments/1368696381249/warc/CC-MAIN-20130516092621-00000-ip-10-60-113-184.ec2.internal.warc.gz", "language": "en", "language_score": 0.813244104385376, "token_count": 1828, "score": 3.609375, "int_score": 4}
{"text": "4 Dice Helps Students Learn to Add, Subtract, Multiply, and Divide Fractions\n4 Dice is an iPad app designed to help students learn to add, subtract, multiply, and divide fractions. The app was developed by the same people that built the popular 5 Dice app that helps students learn the order of operations.\nIn 4 Dice students are shown a fraction and they have to drag four dice into position to complete the arithmetic that will result in the fraction that they were shown. It\u2019s kind of like the Jeopardy concept applied to fractions mathematics. There are five modes in 4 Dice. There are the addition, subtraction, multiplication, and division modes as well as a challenge mode that randomized the problems. At any point in a series of problems students can pause and use the whiteboard to work out possible solutions to a problem.\n4 Dice does ask for an email address, but doesn\u2019t ask users to confirm that email address. If your students don\u2019t have email addresses you can use the Gmail+1 trick to create dummy addresses for them that you can monitor.\n4 Dice costs $0.99. This app is appropriate for elementary and middle school students.", "id": "<urn:uuid:5eadff81-237b-449e-a190-3d2c04c3d0c6>", "dump": "CC-MAIN-2013-20", "url": "http://ipadapps4school.com/2012/12/11/4-dice-helps-students-learn-to-add-subtract-multiply-and-divide-fractions/", "file_path": "s3://commoncrawl/crawl-data/CC-MAIN-2013-20/segments/1368696381249/warc/CC-MAIN-20130516092621-00000-ip-10-60-113-184.ec2.internal.warc.gz", "language": "en", "language_score": 0.9572340250015259, "token_count": 247, "score": 2.96875, "int_score": 3}
